//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34003
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Client.CustomerService.Framework.QuickReplyService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuickReplyRsult", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class QuickReplyRsult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContextField;
        
        private int QuickReplyIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Context {
            get {
                return this.ContextField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextField, value) != true)) {
                    this.ContextField = value;
                    this.RaisePropertyChanged("Context");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuickReplyId {
            get {
                return this.QuickReplyIdField;
            }
            set {
                if ((this.QuickReplyIdField.Equals(value) != true)) {
                    this.QuickReplyIdField = value;
                    this.RaisePropertyChanged("QuickReplyId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuickReplyService.IQuickReplyService")]
    public interface IQuickReplyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuickReplyService/GetQuickReplys", ReplyAction="http://tempuri.org/IQuickReplyService/GetQuickReplysResponse")]
        System.IAsyncResult BeginGetQuickReplys(string username, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult> EndGetQuickReplys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuickReplyService/AddQuickReply", ReplyAction="http://tempuri.org/IQuickReplyService/AddQuickReplyResponse")]
        System.IAsyncResult BeginAddQuickReply(string username, string context, System.AsyncCallback callback, object asyncState);
        
        bool EndAddQuickReply(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuickReplyService/UpdateQuickReply", ReplyAction="http://tempuri.org/IQuickReplyService/UpdateQuickReplyResponse")]
        System.IAsyncResult BeginUpdateQuickReply(int id, string context, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateQuickReply(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuickReplyService/RemoveQuickReply", ReplyAction="http://tempuri.org/IQuickReplyService/RemoveQuickReplyResponse")]
        System.IAsyncResult BeginRemoveQuickReply(int id, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveQuickReply(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQuickReplyServiceChannel : Client.CustomerService.Framework.QuickReplyService.IQuickReplyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQuickReplysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQuickReplysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddQuickReplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddQuickReplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateQuickReplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateQuickReplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveQuickReplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveQuickReplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QuickReplyServiceClient : System.ServiceModel.ClientBase<Client.CustomerService.Framework.QuickReplyService.IQuickReplyService>, Client.CustomerService.Framework.QuickReplyService.IQuickReplyService {
        
        private BeginOperationDelegate onBeginGetQuickReplysDelegate;
        
        private EndOperationDelegate onEndGetQuickReplysDelegate;
        
        private System.Threading.SendOrPostCallback onGetQuickReplysCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddQuickReplyDelegate;
        
        private EndOperationDelegate onEndAddQuickReplyDelegate;
        
        private System.Threading.SendOrPostCallback onAddQuickReplyCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateQuickReplyDelegate;
        
        private EndOperationDelegate onEndUpdateQuickReplyDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateQuickReplyCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveQuickReplyDelegate;
        
        private EndOperationDelegate onEndRemoveQuickReplyDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveQuickReplyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public QuickReplyServiceClient() {
        }
        
        public QuickReplyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QuickReplyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuickReplyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuickReplyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetQuickReplysCompletedEventArgs> GetQuickReplysCompleted;
        
        public event System.EventHandler<AddQuickReplyCompletedEventArgs> AddQuickReplyCompleted;
        
        public event System.EventHandler<UpdateQuickReplyCompletedEventArgs> UpdateQuickReplyCompleted;
        
        public event System.EventHandler<RemoveQuickReplyCompletedEventArgs> RemoveQuickReplyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.BeginGetQuickReplys(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuickReplys(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult> Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.EndGetQuickReplys(System.IAsyncResult result) {
            return base.Channel.EndGetQuickReplys(result);
        }
        
        private System.IAsyncResult OnBeginGetQuickReplys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).BeginGetQuickReplys(username, callback, asyncState);
        }
        
        private object[] OnEndGetQuickReplys(System.IAsyncResult result) {
            System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult> retVal = ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).EndGetQuickReplys(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQuickReplysCompleted(object state) {
            if ((this.GetQuickReplysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQuickReplysCompleted(this, new GetQuickReplysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQuickReplysAsync(string username) {
            this.GetQuickReplysAsync(username, null);
        }
        
        public void GetQuickReplysAsync(string username, object userState) {
            if ((this.onBeginGetQuickReplysDelegate == null)) {
                this.onBeginGetQuickReplysDelegate = new BeginOperationDelegate(this.OnBeginGetQuickReplys);
            }
            if ((this.onEndGetQuickReplysDelegate == null)) {
                this.onEndGetQuickReplysDelegate = new EndOperationDelegate(this.OnEndGetQuickReplys);
            }
            if ((this.onGetQuickReplysCompletedDelegate == null)) {
                this.onGetQuickReplysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQuickReplysCompleted);
            }
            base.InvokeAsync(this.onBeginGetQuickReplysDelegate, new object[] {
                        username}, this.onEndGetQuickReplysDelegate, this.onGetQuickReplysCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.BeginAddQuickReply(string username, string context, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddQuickReply(username, context, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.EndAddQuickReply(System.IAsyncResult result) {
            return base.Channel.EndAddQuickReply(result);
        }
        
        private System.IAsyncResult OnBeginAddQuickReply(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string context = ((string)(inValues[1]));
            return ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).BeginAddQuickReply(username, context, callback, asyncState);
        }
        
        private object[] OnEndAddQuickReply(System.IAsyncResult result) {
            bool retVal = ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).EndAddQuickReply(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddQuickReplyCompleted(object state) {
            if ((this.AddQuickReplyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddQuickReplyCompleted(this, new AddQuickReplyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddQuickReplyAsync(string username, string context) {
            this.AddQuickReplyAsync(username, context, null);
        }
        
        public void AddQuickReplyAsync(string username, string context, object userState) {
            if ((this.onBeginAddQuickReplyDelegate == null)) {
                this.onBeginAddQuickReplyDelegate = new BeginOperationDelegate(this.OnBeginAddQuickReply);
            }
            if ((this.onEndAddQuickReplyDelegate == null)) {
                this.onEndAddQuickReplyDelegate = new EndOperationDelegate(this.OnEndAddQuickReply);
            }
            if ((this.onAddQuickReplyCompletedDelegate == null)) {
                this.onAddQuickReplyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddQuickReplyCompleted);
            }
            base.InvokeAsync(this.onBeginAddQuickReplyDelegate, new object[] {
                        username,
                        context}, this.onEndAddQuickReplyDelegate, this.onAddQuickReplyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.BeginUpdateQuickReply(int id, string context, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateQuickReply(id, context, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.EndUpdateQuickReply(System.IAsyncResult result) {
            return base.Channel.EndUpdateQuickReply(result);
        }
        
        private System.IAsyncResult OnBeginUpdateQuickReply(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string context = ((string)(inValues[1]));
            return ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).BeginUpdateQuickReply(id, context, callback, asyncState);
        }
        
        private object[] OnEndUpdateQuickReply(System.IAsyncResult result) {
            bool retVal = ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).EndUpdateQuickReply(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateQuickReplyCompleted(object state) {
            if ((this.UpdateQuickReplyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateQuickReplyCompleted(this, new UpdateQuickReplyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateQuickReplyAsync(int id, string context) {
            this.UpdateQuickReplyAsync(id, context, null);
        }
        
        public void UpdateQuickReplyAsync(int id, string context, object userState) {
            if ((this.onBeginUpdateQuickReplyDelegate == null)) {
                this.onBeginUpdateQuickReplyDelegate = new BeginOperationDelegate(this.OnBeginUpdateQuickReply);
            }
            if ((this.onEndUpdateQuickReplyDelegate == null)) {
                this.onEndUpdateQuickReplyDelegate = new EndOperationDelegate(this.OnEndUpdateQuickReply);
            }
            if ((this.onUpdateQuickReplyCompletedDelegate == null)) {
                this.onUpdateQuickReplyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateQuickReplyCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateQuickReplyDelegate, new object[] {
                        id,
                        context}, this.onEndUpdateQuickReplyDelegate, this.onUpdateQuickReplyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.BeginRemoveQuickReply(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveQuickReply(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Client.CustomerService.Framework.QuickReplyService.IQuickReplyService.EndRemoveQuickReply(System.IAsyncResult result) {
            return base.Channel.EndRemoveQuickReply(result);
        }
        
        private System.IAsyncResult OnBeginRemoveQuickReply(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).BeginRemoveQuickReply(id, callback, asyncState);
        }
        
        private object[] OnEndRemoveQuickReply(System.IAsyncResult result) {
            bool retVal = ((Client.CustomerService.Framework.QuickReplyService.IQuickReplyService)(this)).EndRemoveQuickReply(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveQuickReplyCompleted(object state) {
            if ((this.RemoveQuickReplyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveQuickReplyCompleted(this, new RemoveQuickReplyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveQuickReplyAsync(int id) {
            this.RemoveQuickReplyAsync(id, null);
        }
        
        public void RemoveQuickReplyAsync(int id, object userState) {
            if ((this.onBeginRemoveQuickReplyDelegate == null)) {
                this.onBeginRemoveQuickReplyDelegate = new BeginOperationDelegate(this.OnBeginRemoveQuickReply);
            }
            if ((this.onEndRemoveQuickReplyDelegate == null)) {
                this.onEndRemoveQuickReplyDelegate = new EndOperationDelegate(this.OnEndRemoveQuickReply);
            }
            if ((this.onRemoveQuickReplyCompletedDelegate == null)) {
                this.onRemoveQuickReplyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveQuickReplyCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveQuickReplyDelegate, new object[] {
                        id}, this.onEndRemoveQuickReplyDelegate, this.onRemoveQuickReplyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Client.CustomerService.Framework.QuickReplyService.IQuickReplyService CreateChannel() {
            return new QuickReplyServiceClientChannel(this);
        }
        
        private class QuickReplyServiceClientChannel : ChannelBase<Client.CustomerService.Framework.QuickReplyService.IQuickReplyService>, Client.CustomerService.Framework.QuickReplyService.IQuickReplyService {
            
            public QuickReplyServiceClientChannel(System.ServiceModel.ClientBase<Client.CustomerService.Framework.QuickReplyService.IQuickReplyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetQuickReplys(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetQuickReplys", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult> EndGetQuickReplys(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult> _result = ((System.Collections.Generic.List<Client.CustomerService.Framework.QuickReplyService.QuickReplyRsult>)(base.EndInvoke("GetQuickReplys", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddQuickReply(string username, string context, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = context;
                System.IAsyncResult _result = base.BeginInvoke("AddQuickReply", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddQuickReply(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddQuickReply", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateQuickReply(int id, string context, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = context;
                System.IAsyncResult _result = base.BeginInvoke("UpdateQuickReply", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateQuickReply(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateQuickReply", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveQuickReply(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveQuickReply", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveQuickReply(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveQuickReply", _args, result)));
                return _result;
            }
        }
    }
}
