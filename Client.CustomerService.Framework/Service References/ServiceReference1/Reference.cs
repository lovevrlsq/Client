//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Client.CustomerService.Framework.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetInResult", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class SetInResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.UnreadMessageCountResult> UnreadMessageCountsField;
        
        private System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.UserInfoResult> UsersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.UnreadMessageCountResult> UnreadMessageCounts {
            get {
                return this.UnreadMessageCountsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnreadMessageCountsField, value) != true)) {
                    this.UnreadMessageCountsField = value;
                    this.RaisePropertyChanged("UnreadMessageCounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.UserInfoResult> Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnreadMessageCountResult", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class UnreadMessageCountResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfoResult", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class UserInfoResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Client.CustomerService.Framework.ServiceReference1.UserOnlineStatus OnlineStatusField;
        
        private Client.CustomerService.Framework.ServiceReference1.UserInfoType TypeField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CustomerService.Framework.ServiceReference1.UserOnlineStatus OnlineStatus {
            get {
                return this.OnlineStatusField;
            }
            set {
                if ((this.OnlineStatusField.Equals(value) != true)) {
                    this.OnlineStatusField = value;
                    this.RaisePropertyChanged("OnlineStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CustomerService.Framework.ServiceReference1.UserInfoType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserOnlineStatus", Namespace="http://schemas.datacontract.org/2004/07/Client.Model")]
    public enum UserOnlineStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        离线 = -2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        隐身 = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        忙碌 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        在线 = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfoType", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public enum UserInfoType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        上级 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级 = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户 = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        客服 = 301,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageResult", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class MessageResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AddressField;
        
        private string ContentField;
        
        private string FromField;
        
        private string IpField;
        
        private bool IsOfficialField;
        
        private bool IsSelfField;
        
        private System.DateTime SendTimeField;
        
        private string ToField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOfficial {
            get {
                return this.IsOfficialField;
            }
            set {
                if ((this.IsOfficialField.Equals(value) != true)) {
                    this.IsOfficialField = value;
                    this.RaisePropertyChanged("IsOfficial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSelf {
            get {
                return this.IsSelfField;
            }
            set {
                if ((this.IsSelfField.Equals(value) != true)) {
                    this.IsSelfField = value;
                    this.RaisePropertyChanged("IsSelf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendTime {
            get {
                return this.SendTimeField;
            }
            set {
                if ((this.SendTimeField.Equals(value) != true)) {
                    this.SendTimeField = value;
                    this.RaisePropertyChanged("SendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendMessageImport", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class SendMessageImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContentField;
        
        private string FromField;
        
        private bool IsOfficialField;
        
        private string ToField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOfficial {
            get {
                return this.IsOfficialField;
            }
            set {
                if ((this.IsOfficialField.Equals(value) != true)) {
                    this.IsOfficialField = value;
                    this.RaisePropertyChanged("IsOfficial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfMessageResult5O3_PPRz2", Namespace="http://schemas.datacontract.org/2004/07/Client.Service.DataContract")]
    public partial class PaginationListOfMessageResult5O3_PPRz2 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChatService", CallbackContract=typeof(Client.CustomerService.Framework.ServiceReference1.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/RegisterAndGetFriendList", ReplyAction="http://tempuri.org/IChatService/RegisterAndGetFriendListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IChatService/RegisterAndGetFriendListStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.IAsyncResult BeginRegisterAndGetFriendList(string username, bool isOfficia, System.AsyncCallback callback, object asyncState);
        
        Client.CustomerService.Framework.ServiceReference1.SetInResult EndRegisterAndGetFriendList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/ChangeTargetUser", ReplyAction="http://tempuri.org/IChatService/ChangeTargetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IChatService/ChangeTargetUserStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.IAsyncResult BeginChangeTargetUser(string targetUser, string self, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> EndChangeTargetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/KeepHeartbeat", ReplyAction="http://tempuri.org/IChatService/KeepHeartbeatResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IChatService/KeepHeartbeatStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.IAsyncResult BeginKeepHeartbeat(string username, System.AsyncCallback callback, object asyncState);
        
        void EndKeepHeartbeat(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IChatService/SendMessageStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.IAsyncResult BeginSendMessage(Client.CustomerService.Framework.ServiceReference1.SendMessageImport import, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IChatService/GetMessagesStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.IAsyncResult BeginGetMessages(string _from, string to, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState);
        
        Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2 EndGetMessages(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/AddTheCountOfNewMessageForSomeone")]
        void AddTheCountOfNewMessageForSomeone(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/WriteMessage")]
        void WriteMessage(Client.CustomerService.Framework.ServiceReference1.MessageResult message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ChangeOnlineStatus")]
        void ChangeOnlineStatus(string username, Client.CustomerService.Framework.ServiceReference1.UserOnlineStatus onlineStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : Client.CustomerService.Framework.ServiceReference1.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterAndGetFriendListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterAndGetFriendListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.CustomerService.Framework.ServiceReference1.SetInResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.CustomerService.Framework.ServiceReference1.SetInResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeTargetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeTargetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<Client.CustomerService.Framework.ServiceReference1.IChatService>, Client.CustomerService.Framework.ServiceReference1.IChatService {
        
        private BeginOperationDelegate onBeginRegisterAndGetFriendListDelegate;
        
        private EndOperationDelegate onEndRegisterAndGetFriendListDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterAndGetFriendListCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeTargetUserDelegate;
        
        private EndOperationDelegate onEndChangeTargetUserDelegate;
        
        private System.Threading.SendOrPostCallback onChangeTargetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginKeepHeartbeatDelegate;
        
        private EndOperationDelegate onEndKeepHeartbeatDelegate;
        
        private System.Threading.SendOrPostCallback onKeepHeartbeatCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessagesDelegate;
        
        private EndOperationDelegate onEndGetMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessagesCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                this(new ChatServiceClientCallback(), endpointConfigurationName) {
        }
        
        private ChatServiceClient(ChatServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ChatServiceClientCallback(), binding, remoteAddress) {
        }
        
        private ChatServiceClient(ChatServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ChatServiceClient() : 
                this(new ChatServiceClientCallback()) {
        }
        
        private ChatServiceClient(ChatServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<RegisterAndGetFriendListCompletedEventArgs> RegisterAndGetFriendListCompleted;
        
        public event System.EventHandler<ChangeTargetUserCompletedEventArgs> ChangeTargetUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> KeepHeartbeatCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<GetMessagesCompletedEventArgs> GetMessagesCompleted;
        
        public event System.EventHandler<AddTheCountOfNewMessageForSomeoneReceivedEventArgs> AddTheCountOfNewMessageForSomeoneReceived;
        
        public event System.EventHandler<WriteMessageReceivedEventArgs> WriteMessageReceived;
        
        public event System.EventHandler<ChangeOnlineStatusReceivedEventArgs> ChangeOnlineStatusReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.ServiceReference1.IChatService.BeginRegisterAndGetFriendList(string username, bool isOfficia, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterAndGetFriendList(username, isOfficia, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.CustomerService.Framework.ServiceReference1.SetInResult Client.CustomerService.Framework.ServiceReference1.IChatService.EndRegisterAndGetFriendList(System.IAsyncResult result) {
            return base.Channel.EndRegisterAndGetFriendList(result);
        }
        
        private System.IAsyncResult OnBeginRegisterAndGetFriendList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string username = ((string)(inValues[0]));
            bool isOfficia = ((bool)(inValues[1]));
            return ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).BeginRegisterAndGetFriendList(username, isOfficia, callback, asyncState);
        }
        
        private object[] OnEndRegisterAndGetFriendList(System.IAsyncResult result) {
            Client.CustomerService.Framework.ServiceReference1.SetInResult retVal = ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).EndRegisterAndGetFriendList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterAndGetFriendListCompleted(object state) {
            if ((this.RegisterAndGetFriendListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterAndGetFriendListCompleted(this, new RegisterAndGetFriendListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAndGetFriendListAsync(string username, bool isOfficia) {
            this.RegisterAndGetFriendListAsync(username, isOfficia, null);
        }
        
        public void RegisterAndGetFriendListAsync(string username, bool isOfficia, object userState) {
            if ((this.onBeginRegisterAndGetFriendListDelegate == null)) {
                this.onBeginRegisterAndGetFriendListDelegate = new BeginOperationDelegate(this.OnBeginRegisterAndGetFriendList);
            }
            if ((this.onEndRegisterAndGetFriendListDelegate == null)) {
                this.onEndRegisterAndGetFriendListDelegate = new EndOperationDelegate(this.OnEndRegisterAndGetFriendList);
            }
            if ((this.onRegisterAndGetFriendListCompletedDelegate == null)) {
                this.onRegisterAndGetFriendListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterAndGetFriendListCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterAndGetFriendListDelegate, new object[] {
                        username,
                        isOfficia}, this.onEndRegisterAndGetFriendListDelegate, this.onRegisterAndGetFriendListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.ServiceReference1.IChatService.BeginChangeTargetUser(string targetUser, string self, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeTargetUser(targetUser, self, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> Client.CustomerService.Framework.ServiceReference1.IChatService.EndChangeTargetUser(System.IAsyncResult result) {
            return base.Channel.EndChangeTargetUser(result);
        }
        
        private System.IAsyncResult OnBeginChangeTargetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string targetUser = ((string)(inValues[0]));
            string self = ((string)(inValues[1]));
            return ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).BeginChangeTargetUser(targetUser, self, callback, asyncState);
        }
        
        private object[] OnEndChangeTargetUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> retVal = ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).EndChangeTargetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeTargetUserCompleted(object state) {
            if ((this.ChangeTargetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeTargetUserCompleted(this, new ChangeTargetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeTargetUserAsync(string targetUser, string self) {
            this.ChangeTargetUserAsync(targetUser, self, null);
        }
        
        public void ChangeTargetUserAsync(string targetUser, string self, object userState) {
            if ((this.onBeginChangeTargetUserDelegate == null)) {
                this.onBeginChangeTargetUserDelegate = new BeginOperationDelegate(this.OnBeginChangeTargetUser);
            }
            if ((this.onEndChangeTargetUserDelegate == null)) {
                this.onEndChangeTargetUserDelegate = new EndOperationDelegate(this.OnEndChangeTargetUser);
            }
            if ((this.onChangeTargetUserCompletedDelegate == null)) {
                this.onChangeTargetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeTargetUserCompleted);
            }
            base.InvokeAsync(this.onBeginChangeTargetUserDelegate, new object[] {
                        targetUser,
                        self}, this.onEndChangeTargetUserDelegate, this.onChangeTargetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.ServiceReference1.IChatService.BeginKeepHeartbeat(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKeepHeartbeat(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Client.CustomerService.Framework.ServiceReference1.IChatService.EndKeepHeartbeat(System.IAsyncResult result) {
            base.Channel.EndKeepHeartbeat(result);
        }
        
        private System.IAsyncResult OnBeginKeepHeartbeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string username = ((string)(inValues[0]));
            return ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).BeginKeepHeartbeat(username, callback, asyncState);
        }
        
        private object[] OnEndKeepHeartbeat(System.IAsyncResult result) {
            ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).EndKeepHeartbeat(result);
            return null;
        }
        
        private void OnKeepHeartbeatCompleted(object state) {
            if ((this.KeepHeartbeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KeepHeartbeatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KeepHeartbeatAsync(string username) {
            this.KeepHeartbeatAsync(username, null);
        }
        
        public void KeepHeartbeatAsync(string username, object userState) {
            if ((this.onBeginKeepHeartbeatDelegate == null)) {
                this.onBeginKeepHeartbeatDelegate = new BeginOperationDelegate(this.OnBeginKeepHeartbeat);
            }
            if ((this.onEndKeepHeartbeatDelegate == null)) {
                this.onEndKeepHeartbeatDelegate = new EndOperationDelegate(this.OnEndKeepHeartbeat);
            }
            if ((this.onKeepHeartbeatCompletedDelegate == null)) {
                this.onKeepHeartbeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKeepHeartbeatCompleted);
            }
            base.InvokeAsync(this.onBeginKeepHeartbeatDelegate, new object[] {
                        username}, this.onEndKeepHeartbeatDelegate, this.onKeepHeartbeatCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.ServiceReference1.IChatService.BeginSendMessage(Client.CustomerService.Framework.ServiceReference1.SendMessageImport import, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(import, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Client.CustomerService.Framework.ServiceReference1.IChatService.EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Client.CustomerService.Framework.ServiceReference1.SendMessageImport import = ((Client.CustomerService.Framework.ServiceReference1.SendMessageImport)(inValues[0]));
            return ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).BeginSendMessage(import, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(Client.CustomerService.Framework.ServiceReference1.SendMessageImport import) {
            this.SendMessageAsync(import, null);
        }
        
        public void SendMessageAsync(Client.CustomerService.Framework.ServiceReference1.SendMessageImport import, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        import}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.CustomerService.Framework.ServiceReference1.IChatService.BeginGetMessages(string _from, string to, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessages(_from, to, pageIndex, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2 Client.CustomerService.Framework.ServiceReference1.IChatService.EndGetMessages(System.IAsyncResult result) {
            return base.Channel.EndGetMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string _from = ((string)(inValues[0]));
            string to = ((string)(inValues[1]));
            int pageIndex = ((int)(inValues[2]));
            int pageSize = ((int)(inValues[3]));
            return ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).BeginGetMessages(_from, to, pageIndex, pageSize, callback, asyncState);
        }
        
        private object[] OnEndGetMessages(System.IAsyncResult result) {
            Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2 retVal = ((Client.CustomerService.Framework.ServiceReference1.IChatService)(this)).EndGetMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessagesCompleted(object state) {
            if ((this.GetMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessagesAsync(string _from, string to, int pageIndex, int pageSize) {
            this.GetMessagesAsync(_from, to, pageIndex, pageSize, null);
        }
        
        public void GetMessagesAsync(string _from, string to, int pageIndex, int pageSize, object userState) {
            if ((this.onBeginGetMessagesDelegate == null)) {
                this.onBeginGetMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetMessages);
            }
            if ((this.onEndGetMessagesDelegate == null)) {
                this.onEndGetMessagesDelegate = new EndOperationDelegate(this.OnEndGetMessages);
            }
            if ((this.onGetMessagesCompletedDelegate == null)) {
                this.onGetMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessagesDelegate, new object[] {
                        _from,
                        to,
                        pageIndex,
                        pageSize}, this.onEndGetMessagesDelegate, this.onGetMessagesCompletedDelegate, userState);
        }
        
        private void OnAddTheCountOfNewMessageForSomeoneReceived(object state) {
            if ((this.AddTheCountOfNewMessageForSomeoneReceived != null)) {
                object[] results = ((object[])(state));
                this.AddTheCountOfNewMessageForSomeoneReceived(this, new AddTheCountOfNewMessageForSomeoneReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnWriteMessageReceived(object state) {
            if ((this.WriteMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.WriteMessageReceived(this, new WriteMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnChangeOnlineStatusReceived(object state) {
            if ((this.ChangeOnlineStatusReceived != null)) {
                object[] results = ((object[])(state));
                this.ChangeOnlineStatusReceived(this, new ChangeOnlineStatusReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (((this.AddTheCountOfNewMessageForSomeoneReceived != null) 
                        || (this.WriteMessageReceived != null)) 
                        || (this.ChangeOnlineStatusReceived != null)))) {
                throw new System.InvalidOperationException("指定了回调 InstanceContext 时无法使用回调事件。请选择是指定回调 InstanceContext 还是订阅回调事件。");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Client.CustomerService.Framework.ServiceReference1.IChatService CreateChannel() {
            return new ChatServiceClientChannel(this);
        }
        
        private class ChatServiceClientCallback : object, IChatServiceCallback {
            
            private ChatServiceClient proxy;
            
            public void Initialize(ChatServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void AddTheCountOfNewMessageForSomeone(string username) {
                this.proxy.OnAddTheCountOfNewMessageForSomeoneReceived(new object[] {
                            username});
            }
            
            public void WriteMessage(Client.CustomerService.Framework.ServiceReference1.MessageResult message) {
                this.proxy.OnWriteMessageReceived(new object[] {
                            message});
            }
            
            public void ChangeOnlineStatus(string username, Client.CustomerService.Framework.ServiceReference1.UserOnlineStatus onlineStatus) {
                this.proxy.OnChangeOnlineStatusReceived(new object[] {
                            username,
                            onlineStatus});
            }
        }
        
        private class ChatServiceClientChannel : ChannelBase<Client.CustomerService.Framework.ServiceReference1.IChatService>, Client.CustomerService.Framework.ServiceReference1.IChatService {
            
            public ChatServiceClientChannel(System.ServiceModel.DuplexClientBase<Client.CustomerService.Framework.ServiceReference1.IChatService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegisterAndGetFriendList(string username, bool isOfficia, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = isOfficia;
                System.IAsyncResult _result = base.BeginInvoke("RegisterAndGetFriendList", _args, callback, asyncState);
                return _result;
            }
            
            public Client.CustomerService.Framework.ServiceReference1.SetInResult EndRegisterAndGetFriendList(System.IAsyncResult result) {
                object[] _args = new object[0];
                Client.CustomerService.Framework.ServiceReference1.SetInResult _result = ((Client.CustomerService.Framework.ServiceReference1.SetInResult)(base.EndInvoke("RegisterAndGetFriendList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeTargetUser(string targetUser, string self, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = targetUser;
                _args[1] = self;
                System.IAsyncResult _result = base.BeginInvoke("ChangeTargetUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> EndChangeTargetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult> _result = ((System.Collections.ObjectModel.ObservableCollection<Client.CustomerService.Framework.ServiceReference1.MessageResult>)(base.EndInvoke("ChangeTargetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginKeepHeartbeat(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("KeepHeartbeat", _args, callback, asyncState);
                return _result;
            }
            
            public void EndKeepHeartbeat(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("KeepHeartbeat", _args, result);
            }
            
            public System.IAsyncResult BeginSendMessage(Client.CustomerService.Framework.ServiceReference1.SendMessageImport import, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = import;
                System.IAsyncResult _result = base.BeginInvoke("SendMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMessage", _args, result);
            }
            
            public System.IAsyncResult BeginGetMessages(string _from, string to, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = _from;
                _args[1] = to;
                _args[2] = pageIndex;
                _args[3] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("GetMessages", _args, callback, asyncState);
                return _result;
            }
            
            public Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2 EndGetMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2 _result = ((Client.CustomerService.Framework.ServiceReference1.PaginationListOfMessageResult5O3_PPRz2)(base.EndInvoke("GetMessages", _args, result)));
                return _result;
            }
        }
    }
    
    public class AddTheCountOfNewMessageForSomeoneReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTheCountOfNewMessageForSomeoneReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string username {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class WriteMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WriteMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client.CustomerService.Framework.ServiceReference1.MessageResult message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.CustomerService.Framework.ServiceReference1.MessageResult)(this.results[0]));
            }
        }
    }
    
    public class ChangeOnlineStatusReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeOnlineStatusReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string username {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public Client.CustomerService.Framework.ServiceReference1.UserOnlineStatus onlineStatus {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client.CustomerService.Framework.ServiceReference1.UserOnlineStatus)(this.results[1]));
            }
        }
    }
}
